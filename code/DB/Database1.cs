// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.co.uk/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Registered to: Ashar Shah
// Company      : N/A
// Licence Type : Commercial
// Licences     : 1
// Valid until  : 11 DEC 2020
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Connection String Name: "MyDbContext"
//     Connection String:      "Data Source=localhost;Initial Catalog=HtmlCache;Integrated security=False;MultipleActiveResultSets=True;User ID=htmlcacheuser;password=**zapped**;"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Developer Edition (64-bit)
// Database Engine Edition: Enterprise
// Database Version       : 13.0.4224.16

// <auto-generated>
// ReSharper disable CheckNamespace
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable NotAccessedVariable
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantCast
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// ReSharper disable UsePatternMatching
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Infrastructure.Annotations;
using System.Data.Entity.Infrastructure.Interception;
using System.Data.Entity.ModelConfiguration;
using System.Data.Entity.Spatial;
using System.Data.Entity.Validation;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace Foundation.HtmlCache.DB
{
    #region Database context interface

    public interface IMyDbContext : IDisposable
    {
        DbSet<CacheItem> CacheItems { get; set; } // CacheItems
        DbSet<CacheKey> CacheKeys { get; set; } // CacheKeys
        DbSet<CacheKeysItem> CacheKeysItems { get; set; } // CacheKeysItems
        DbSet<CacheQueue> CacheQueues { get; set; } // CacheQueue
        DbSet<CacheQueueMessageType> CacheQueueMessageTypes { get; set; } // CacheQueueMessageType
        DbSet<PublishedItem> PublishedItems { get; set; } // PublishedItems

        int SaveChanges();
        Task<int> SaveChangesAsync();
        Task<int> SaveChangesAsync(CancellationToken cancellationToken);
        DbChangeTracker ChangeTracker { get; }
        DbContextConfiguration Configuration { get; }
        Database Database { get; }
        DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        DbEntityEntry Entry(object entity);
        IEnumerable<DbEntityValidationResult> GetValidationErrors();
        DbSet Set(Type entityType);
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        // Stored Procedures
        int MergeQueuedTrackingData();
        // MergeQueuedTrackingDataAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

    #endregion

    #region Database context

    public class MyDbContext : DbContext, IMyDbContext
    {
        public DbSet<CacheItem> CacheItems { get; set; } // CacheItems
        public DbSet<CacheKey> CacheKeys { get; set; } // CacheKeys
        public DbSet<CacheKeysItem> CacheKeysItems { get; set; } // CacheKeysItems
        public DbSet<CacheQueue> CacheQueues { get; set; } // CacheQueue
        public DbSet<CacheQueueMessageType> CacheQueueMessageTypes { get; set; } // CacheQueueMessageType
        public DbSet<PublishedItem> PublishedItems { get; set; } // PublishedItems

        static MyDbContext()
        {
            System.Data.Entity.Database.SetInitializer<MyDbContext>(null);
        }

        /// <inheritdoc />
        public MyDbContext()
            : base("Name=MyDbContext")
        {
        }

        /// <inheritdoc />
        public MyDbContext(string connectionString)
            : base(connectionString)
        {
        }

        /// <inheritdoc />
        public MyDbContext(string connectionString, DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        /// <inheritdoc />
        public MyDbContext(DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        /// <inheritdoc />
        public MyDbContext(DbConnection existingConnection, DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        /// <inheritdoc />
        public MyDbContext(ObjectContext objectContext, bool dbContextOwnsObjectContext)
            : base(objectContext, dbContextOwnsObjectContext)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new CacheItemConfiguration());
            modelBuilder.Configurations.Add(new CacheKeyConfiguration());
            modelBuilder.Configurations.Add(new CacheKeysItemConfiguration());
            modelBuilder.Configurations.Add(new CacheQueueConfiguration());
            modelBuilder.Configurations.Add(new CacheQueueMessageTypeConfiguration());
            modelBuilder.Configurations.Add(new PublishedItemConfiguration());

            // Indexes        
            modelBuilder.Entity<CacheItem>()
                .Property(e => e.Id)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("PK_CacheItems", 1) { IsUnique = true, IsClustered = true })
                );


            modelBuilder.Entity<CacheKey>()
                .Property(e => e.Id)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("PK_CacheKeys", 1) { IsUnique = true, IsClustered = true })
                );


            modelBuilder.Entity<CacheKeysItem>()
                .Property(e => e.Id)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("PK_CacheKeysItems", 1) { IsUnique = true, IsClustered = true })
                );


            modelBuilder.Entity<CacheQueue>()
                .Property(e => e.Id)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("PK_CacheQueue", 1) { IsUnique = true, IsClustered = true })
                );


            modelBuilder.Entity<CacheQueueMessageType>()
                .Property(e => e.Id)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("PK_CacheQueueMessageType", 1) { IsUnique = true, IsClustered = true })
                );


            modelBuilder.Entity<PublishedItem>()
                .Property(e => e.CacheQueueId)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("PK_PublishedItems", 1) { IsUnique = true, IsClustered = true })
                );


            modelBuilder.Entity<PublishedItem>()
                .Property(e => e.ItemId)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("PK_PublishedItems", 2) { IsUnique = true, IsClustered = true })
                );

        }

        public static DbModelBuilder CreateModel(DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new CacheItemConfiguration(schema));
            modelBuilder.Configurations.Add(new CacheKeyConfiguration(schema));
            modelBuilder.Configurations.Add(new CacheKeysItemConfiguration(schema));
            modelBuilder.Configurations.Add(new CacheQueueConfiguration(schema));
            modelBuilder.Configurations.Add(new CacheQueueMessageTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new PublishedItemConfiguration(schema));

            return modelBuilder;
        }

        // Stored Procedures
        public int MergeQueuedTrackingData()
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[MergeQueuedTrackingData] ", procResultParam);

            return (int)procResultParam.Value;
        }

        // MergeQueuedTrackingDataAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

    #endregion

    #region Database context factory

    public class MyDbContextFactory : IDbContextFactory<MyDbContext>
    {
        public MyDbContext Create()
        {
            return new MyDbContext();
        }
    }

    #endregion

    #region POCO classes

    // CacheItems
    public class CacheItem
    {
        public Guid Id { get; set; } // Id (Primary key)
        public Guid ItemId { get; set; } // ItemId
        public Guid CacheKeyId { get; set; } // CacheKey_Id

        // Reverse navigation

        /// <summary>
        /// Child CacheKeysItems where [CacheKeysItems].[CacheItem_Id] point to this entity (FK_CacheKeysItems_CacheItems)
        /// </summary>
        public virtual ICollection<CacheKeysItem> CacheKeysItems { get; set; } // CacheKeysItems.FK_CacheKeysItems_CacheItems

        // Foreign keys

        /// <summary>
        /// Parent CacheKey pointed by [CacheItems].([CacheKeyId]) (FK_CacheItems_CacheKeys)
        /// </summary>
        public virtual CacheKey CacheKey { get; set; } // FK_CacheItems_CacheKeys

        public CacheItem()
        {
            CacheKeysItems = new List<CacheKeysItem>();
        }
    }

    // CacheKeys
    public class CacheKey
    {
        public Guid Id { get; set; } // Id (Primary key)
        public string SiteName { get; set; } // SiteName (length: 250)
        public string SiteLang { get; set; } // SiteLang (length: 250)
        public string HtmlCacheKey { get; set; } // HtmlCacheKey (length: 500)
        public string HtmlCacheResult { get; set; } // HtmlCacheResult

        // Reverse navigation

        /// <summary>
        /// Child CacheItems where [CacheItems].[CacheKey_Id] point to this entity (FK_CacheItems_CacheKeys)
        /// </summary>
        public virtual ICollection<CacheItem> CacheItems { get; set; } // CacheItems.FK_CacheItems_CacheKeys

        /// <summary>
        /// Child CacheKeysItems where [CacheKeysItems].[CacheKey_Id] point to this entity (FK_CacheKeysItems_CacheKeys)
        /// </summary>
        public virtual ICollection<CacheKeysItem> CacheKeysItems { get; set; } // CacheKeysItems.FK_CacheKeysItems_CacheKeys

        public CacheKey()
        {
            CacheItems = new List<CacheItem>();
            CacheKeysItems = new List<CacheKeysItem>();
        }
    }

    // CacheKeysItems
    public class CacheKeysItem
    {
        public Guid Id { get; set; } // Id (Primary key)
        public Guid CacheKeyId { get; set; } // CacheKey_Id
        public Guid CacheItemId { get; set; } // CacheItem_Id

        // Foreign keys

        /// <summary>
        /// Parent CacheItem pointed by [CacheKeysItems].([CacheItemId]) (FK_CacheKeysItems_CacheItems)
        /// </summary>
        public virtual CacheItem CacheItem { get; set; } // FK_CacheKeysItems_CacheItems

        /// <summary>
        /// Parent CacheKey pointed by [CacheKeysItems].([CacheKeyId]) (FK_CacheKeysItems_CacheKeys)
        /// </summary>
        public virtual CacheKey CacheKey { get; set; } // FK_CacheKeysItems_CacheKeys
    }

    // CacheQueue
    public class CacheQueue
    {
        public long Id { get; set; } // Id (Primary key)
        public int CacheQueueMessageTypeId { get; set; } // CacheQueueMessageType_Id
        public string Suffix { get; set; } // Suffix (length: 32)

        // Reverse navigation

        /// <summary>
        /// Child PublishedItems where [PublishedItems].[CacheQueueId] point to this entity (FK_PublishedItems_CacheQueue)
        /// </summary>
        public virtual ICollection<PublishedItem> PublishedItems { get; set; } // PublishedItems.FK_PublishedItems_CacheQueue

        // Foreign keys

        /// <summary>
        /// Parent CacheQueueMessageType pointed by [CacheQueue].([CacheQueueMessageTypeId]) (FK_CacheQueue_CacheQueueMessageType)
        /// </summary>
        public virtual CacheQueueMessageType CacheQueueMessageType { get; set; } // FK_CacheQueue_CacheQueueMessageType

        public CacheQueue()
        {
            PublishedItems = new List<PublishedItem>();
        }
    }

    // CacheQueueMessageType
    public class CacheQueueMessageType
    {
        public int Id { get; set; } // Id (Primary key)
        public string MessageType { get; set; } // MessageType (length: 100)

        // Reverse navigation

        /// <summary>
        /// Child CacheQueues where [CacheQueue].[CacheQueueMessageType_Id] point to this entity (FK_CacheQueue_CacheQueueMessageType)
        /// </summary>
        public virtual ICollection<CacheQueue> CacheQueues { get; set; } // CacheQueue.FK_CacheQueue_CacheQueueMessageType

        public CacheQueueMessageType()
        {
            CacheQueues = new List<CacheQueue>();
        }
    }

    // PublishedItems
    public class PublishedItem
    {
        public long CacheQueueId { get; set; } // CacheQueueId (Primary key)
        public Guid ItemId { get; set; } // ItemId (Primary key)

        // Foreign keys

        /// <summary>
        /// Parent CacheQueue pointed by [PublishedItems].([CacheQueueId]) (FK_PublishedItems_CacheQueue)
        /// </summary>
        public virtual CacheQueue CacheQueue { get; set; } // FK_PublishedItems_CacheQueue
    }


    #endregion

    #region POCO Configuration

    // CacheItems
    public class CacheItemConfiguration : EntityTypeConfiguration<CacheItem>
    {
        public CacheItemConfiguration()
            : this("dbo")
        {
        }

        public CacheItemConfiguration(string schema)
        {
            ToTable("CacheItems", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ItemId).HasColumnName(@"ItemId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.CacheKeyId).HasColumnName(@"CacheKey_Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.CacheKey).WithMany(b => b.CacheItems).HasForeignKey(c => c.CacheKeyId); // FK_CacheItems_CacheKeys
        }
    }

    // CacheKeys
    public class CacheKeyConfiguration : EntityTypeConfiguration<CacheKey>
    {
        public CacheKeyConfiguration()
            : this("dbo")
        {
        }

        public CacheKeyConfiguration(string schema)
        {
            ToTable("CacheKeys", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.SiteName).HasColumnName(@"SiteName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(250);
            Property(x => x.SiteLang).HasColumnName(@"SiteLang").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(250);
            Property(x => x.HtmlCacheKey).HasColumnName(@"HtmlCacheKey").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(500);
            Property(x => x.HtmlCacheResult).HasColumnName(@"HtmlCacheResult").HasColumnType("varchar(max)").IsRequired().IsUnicode(false);
        }
    }

    // CacheKeysItems
    public class CacheKeysItemConfiguration : EntityTypeConfiguration<CacheKeysItem>
    {
        public CacheKeysItemConfiguration()
            : this("dbo")
        {
        }

        public CacheKeysItemConfiguration(string schema)
        {
            ToTable("CacheKeysItems", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.CacheKeyId).HasColumnName(@"CacheKey_Id").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.CacheItemId).HasColumnName(@"CacheItem_Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.CacheItem).WithMany(b => b.CacheKeysItems).HasForeignKey(c => c.CacheItemId).WillCascadeOnDelete(false); // FK_CacheKeysItems_CacheItems
            HasRequired(a => a.CacheKey).WithMany(b => b.CacheKeysItems).HasForeignKey(c => c.CacheKeyId); // FK_CacheKeysItems_CacheKeys
        }
    }

    // CacheQueue
    public class CacheQueueConfiguration : EntityTypeConfiguration<CacheQueue>
    {
        public CacheQueueConfiguration()
            : this("dbo")
        {
        }

        public CacheQueueConfiguration(string schema)
        {
            ToTable("CacheQueue", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.CacheQueueMessageTypeId).HasColumnName(@"CacheQueueMessageType_Id").HasColumnType("int").IsRequired();
            Property(x => x.Suffix).HasColumnName(@"Suffix").HasColumnType("char").IsOptional().IsFixedLength().IsUnicode(false).HasMaxLength(32);

            // Foreign keys
            HasRequired(a => a.CacheQueueMessageType).WithMany(b => b.CacheQueues).HasForeignKey(c => c.CacheQueueMessageTypeId).WillCascadeOnDelete(false); // FK_CacheQueue_CacheQueueMessageType
        }
    }

    // CacheQueueMessageType
    public class CacheQueueMessageTypeConfiguration : EntityTypeConfiguration<CacheQueueMessageType>
    {
        public CacheQueueMessageTypeConfiguration()
            : this("dbo")
        {
        }

        public CacheQueueMessageTypeConfiguration(string schema)
        {
            ToTable("CacheQueueMessageType", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.MessageType).HasColumnName(@"MessageType").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
        }
    }

    // PublishedItems
    public class PublishedItemConfiguration : EntityTypeConfiguration<PublishedItem>
    {
        public PublishedItemConfiguration()
            : this("dbo")
        {
        }

        public PublishedItemConfiguration(string schema)
        {
            ToTable("PublishedItems", schema);
            HasKey(x => new { x.CacheQueueId, x.ItemId });

            Property(x => x.CacheQueueId).HasColumnName(@"CacheQueueId").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ItemId).HasColumnName(@"ItemId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.CacheQueue).WithMany(b => b.PublishedItems).HasForeignKey(c => c.CacheQueueId).WillCascadeOnDelete(false); // FK_PublishedItems_CacheQueue
        }
    }


    #endregion

}
// </auto-generated>

