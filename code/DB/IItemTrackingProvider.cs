// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.co.uk/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Registered to: Ashar Shah
// Company      : N/A
// Licence Type : Commercial
// Licences     : 1
// Valid until  : 11 DEC 2020
//
// Do not make changes directly to this file - edit the template instead.
// ------------------------------------------------------------------------------------------------

// <auto-generated>
// ReSharper disable CheckNamespace
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable NotAccessedVariable
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantCast
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// ReSharper disable UsePatternMatching

using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Validation;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace Foundation.HtmlCache.DB
{
    public interface IItemTrackingProvider : IDisposable
    {
        DbSet<CacheItem> CacheItems { get; set; } // CacheItems
        DbSet<CacheItemsTemp> CacheItemsTemps { get; set; } // CacheItemsTemp
        DbSet<CacheKey> CacheKeys { get; set; } // CacheKeys
        DbSet<CacheKeysItem> CacheKeysItems { get; set; } // CacheKeysItems
        DbSet<CacheKeysItemsTemp> CacheKeysItemsTemps { get; set; } // CacheKeysItemsTemp
        DbSet<CacheKeysTemp> CacheKeysTemps { get; set; } // CacheKeysTemp
        DbSet<CacheQueue> CacheQueues { get; set; } // CacheQueue
        DbSet<CacheQueueBlocker> CacheQueueBlockers { get; set; } // CacheQueueBlocker
        DbSet<CacheQueueMessageType> CacheQueueMessageTypes { get; set; } // CacheQueueMessageType
        DbSet<CacheSiteLang> CacheSiteLangs { get; set; } // CacheSiteLang
        DbSet<CacheSiteLangTemp> CacheSiteLangTemps { get; set; } // CacheSiteLangTemp
        DbSet<PublishedItem> PublishedItems { get; set; } // PublishedItems

        int SaveChanges();
        Task<int> SaveChangesAsync();
        Task<int> SaveChangesAsync(CancellationToken cancellationToken);
        DbChangeTracker ChangeTracker { get; }
        DbContextConfiguration Configuration { get; }
        Database Database { get; }
        DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        DbEntityEntry Entry(object entity);
        IEnumerable<DbEntityValidationResult> GetValidationErrors();
        DbSet Set(Type entityType);
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        // Stored Procedures
        List<ProcessQueueReturnModel> ProcessQueue();
        List<ProcessQueueReturnModel> ProcessQueue(out int procResult);
        Task<List<ProcessQueueReturnModel>> ProcessQueueAsync();

    }
}
// </auto-generated>

