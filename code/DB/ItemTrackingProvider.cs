// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.co.uk/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Registered to: Ashar Shah
// Company      : N/A
// Licence Type : Commercial
// Licences     : 1
// Valid until  : 11 DEC 2020
//
// Do not make changes directly to this file - edit the template instead.
// ------------------------------------------------------------------------------------------------

// <auto-generated>
// ReSharper disable CheckNamespace
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable NotAccessedVariable
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantCast
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// ReSharper disable UsePatternMatching

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Infrastructure.Annotations;
using System.Data.Entity.Infrastructure.Interception;
using System.Data.Entity.Spatial;
using System.Data.Entity.Validation;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace Foundation.HtmlCache.DB
{
    public class ItemTrackingProvider : DbContext, IItemTrackingProvider
    {
        public DbSet<CacheItem> CacheItems { get; set; } // CacheItems
        public DbSet<CacheItemsTemp> CacheItemsTemps { get; set; } // CacheItemsTemp
        public DbSet<CacheKey> CacheKeys { get; set; } // CacheKeys
        public DbSet<CacheKeysItem> CacheKeysItems { get; set; } // CacheKeysItems
        public DbSet<CacheKeysItemsTemp> CacheKeysItemsTemps { get; set; } // CacheKeysItemsTemp
        public DbSet<CacheKeysTemp> CacheKeysTemps { get; set; } // CacheKeysTemp
        public DbSet<CacheQueue> CacheQueues { get; set; } // CacheQueue
        public DbSet<CacheQueueBlocker> CacheQueueBlockers { get; set; } // CacheQueueBlocker
        public DbSet<CacheQueueMessageType> CacheQueueMessageTypes { get; set; } // CacheQueueMessageType
        public DbSet<CacheSiteLang> CacheSiteLangs { get; set; } // CacheSiteLang
        public DbSet<CacheSiteLangTemp> CacheSiteLangTemps { get; set; } // CacheSiteLangTemp
        public DbSet<PublishedItem> PublishedItems { get; set; } // PublishedItems

        static ItemTrackingProvider()
        {
            System.Data.Entity.Database.SetInitializer<ItemTrackingProvider>(null);
        }

        /// <inheritdoc />
        public ItemTrackingProvider()
            : base("Name=HtmlCache")
        {
        }

        /// <inheritdoc />
        public ItemTrackingProvider(string connectionString)
            : base(connectionString)
        {
        }

        /// <inheritdoc />
        public ItemTrackingProvider(string connectionString, DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        /// <inheritdoc />
        public ItemTrackingProvider(DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        /// <inheritdoc />
        public ItemTrackingProvider(DbConnection existingConnection, DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        /// <inheritdoc />
        public ItemTrackingProvider(ObjectContext objectContext, bool dbContextOwnsObjectContext)
            : base(objectContext, dbContextOwnsObjectContext)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new CacheItemConfiguration());
            modelBuilder.Configurations.Add(new CacheItemsTempConfiguration());
            modelBuilder.Configurations.Add(new CacheKeyConfiguration());
            modelBuilder.Configurations.Add(new CacheKeysItemConfiguration());
            modelBuilder.Configurations.Add(new CacheKeysItemsTempConfiguration());
            modelBuilder.Configurations.Add(new CacheKeysTempConfiguration());
            modelBuilder.Configurations.Add(new CacheQueueConfiguration());
            modelBuilder.Configurations.Add(new CacheQueueBlockerConfiguration());
            modelBuilder.Configurations.Add(new CacheQueueMessageTypeConfiguration());
            modelBuilder.Configurations.Add(new CacheSiteLangConfiguration());
            modelBuilder.Configurations.Add(new CacheSiteLangTempConfiguration());
            modelBuilder.Configurations.Add(new PublishedItemConfiguration());

            // Indexes        
            modelBuilder.Entity<CacheItem>()
                .Property(e => e.Id)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("PK_CacheItems", 1) { IsUnique = true, IsClustered = true })
                );


            modelBuilder.Entity<CacheItemsTemp>()
                .Property(e => e.Id)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("PK_CacheItemsTemp", 1) { IsUnique = true, IsClustered = true })
                );


            modelBuilder.Entity<CacheKey>()
                .Property(e => e.Id)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("PK_CacheKeys", 1) { IsUnique = true, IsClustered = true })
                );


            modelBuilder.Entity<CacheKeysItem>()
                .Property(e => e.Id)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("PK_CacheKeysItems", 1) { IsUnique = true, IsClustered = true })
                );


            modelBuilder.Entity<CacheKeysItemsTemp>()
                .Property(e => e.Id)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("PK_CacheKeysItemsTemp", 1) { IsUnique = true, IsClustered = true })
                );


            modelBuilder.Entity<CacheKeysTemp>()
                .Property(e => e.Id)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("PK_CacheKeysTemp", 1) { IsUnique = true, IsClustered = true })
                );


            modelBuilder.Entity<CacheQueue>()
                .Property(e => e.Id)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("PK_CacheQueue", 1) { IsUnique = true, IsClustered = true })
                );


            modelBuilder.Entity<CacheQueueBlocker>()
                .Property(e => e.Id)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("PK_CacheQueueBlocker", 1) { IsUnique = true, IsClustered = true })
                );


            modelBuilder.Entity<CacheQueueMessageType>()
                .Property(e => e.Id)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("PK_CacheQueueMessageType", 1) { IsUnique = true, IsClustered = true })
                );


            modelBuilder.Entity<CacheSiteLang>()
                .Property(e => e.Id)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("PK_CacheSiteLang", 1) { IsUnique = true, IsClustered = true })
                );


            modelBuilder.Entity<CacheSiteLangTemp>()
                .Property(e => e.Id)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("PK_CacheSiteLangTemp", 1) { IsUnique = true, IsClustered = true })
                );


            modelBuilder.Entity<CacheSiteLangTemp>()
                .Property(e => e.Name)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("IX_CacheSiteLangTemp", 1))
                );


            modelBuilder.Entity<CacheSiteLangTemp>()
                .Property(e => e.Lang)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("IX_CacheSiteLangTemp", 2))
                );


            modelBuilder.Entity<PublishedItem>()
                .Property(e => e.CacheQueueId)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("PK_PublishedItems", 1) { IsUnique = true, IsClustered = true })
                );


            modelBuilder.Entity<PublishedItem>()
                .Property(e => e.ItemId)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("PK_PublishedItems", 2) { IsUnique = true, IsClustered = true })
                );

        }

        public static DbModelBuilder CreateModel(DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new CacheItemConfiguration(schema));
            modelBuilder.Configurations.Add(new CacheItemsTempConfiguration(schema));
            modelBuilder.Configurations.Add(new CacheKeyConfiguration(schema));
            modelBuilder.Configurations.Add(new CacheKeysItemConfiguration(schema));
            modelBuilder.Configurations.Add(new CacheKeysItemsTempConfiguration(schema));
            modelBuilder.Configurations.Add(new CacheKeysTempConfiguration(schema));
            modelBuilder.Configurations.Add(new CacheQueueConfiguration(schema));
            modelBuilder.Configurations.Add(new CacheQueueBlockerConfiguration(schema));
            modelBuilder.Configurations.Add(new CacheQueueMessageTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CacheSiteLangConfiguration(schema));
            modelBuilder.Configurations.Add(new CacheSiteLangTempConfiguration(schema));
            modelBuilder.Configurations.Add(new PublishedItemConfiguration(schema));

            return modelBuilder;
        }

        // Stored Procedures
        public List<ProcessQueueReturnModel> ProcessQueue()
        {
            int procResult;
            return ProcessQueue(out procResult);
        }

        public List<ProcessQueueReturnModel> ProcessQueue(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ProcessQueueReturnModel>("EXEC @procResult = [dbo].[ProcessQueue]", procResultParam).ToList();
            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<ProcessQueueReturnModel>> ProcessQueueAsync()
        {
            var procResultData = await Database.SqlQuery<ProcessQueueReturnModel>("EXEC [dbo].[ProcessQueue]").ToListAsync();
            return procResultData;
        }

    }
}
// </auto-generated>

